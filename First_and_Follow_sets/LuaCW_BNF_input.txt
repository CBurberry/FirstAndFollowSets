chunk ::= chunk_block_rep chunk_last !
scolon_opt ::= ; | epsilon !
chunk_block_rep ::= stat scolon_opt chunk_block_rep | epsilon !
chunk_last ::= laststat scolon_opt | epsilon !
block ::= chunk !
stat ::= varlist = explist 
	   | functioncall
	   | do block end
	   | while exp do block end
	   | repeat block until exp
	   | if exp then block elseif_block_rep else_block_opt end
	   | function funcname funcbody
	   | for for_stat
	   | local local_stat !
elseif_block_rep ::= elseif exp then block elseif_block_rep | epsilon !
else_block_opt ::= else block | epsilon !
for_stat ::= Name = exp , exp comma_exp_opt do block end
		   | namelist in explist do block end !
comma_exp_opt ::= , exp | epsilon !
local_stat ::= function Name funcbody
			 | local namelist eq_explist_opt !			 
eq_explist_opt ::= = explist | epsilon !
explist_opt ::= explist | epsilon !
laststat ::= return explist_opt
		   | break !   
funcname ::= Name dot_member_rep colon_member_opt !
dot_member_rep ::= . Name dot_member_rep | epsilon !
colon_member_opt ::= : Name | epsilon !
varlist  ::= var comma_var_rep !
comma_var_rep ::= , var | epsilon !
var ::= Name 
	  | prefixexp var_member !
var_member ::= [ exp ] 
			 | . Name !
namelist ::= Name comma_name_rep !
comma_name_rep ::= , Name comma_name_rep | epsilon !
explist  ::= exp_comma_rep exp !
exp_comma_rep ::= exp , exp_comma_rep | epsilon !
exp ::= nil exp_prime | false exp_prime | true exp_prime | Number exp_prime 
	  | string exp_prime | ... exp_prime | function exp_prime
      | prefixexp exp_prime | tableconstructor exp_prime | unop exp exp_prime !
exp_prime ::= binop exp exp_prime
			| epsilon !
prefixexp ::= var_member prefixexp_prime 
			| Name prefixexp_prime 
			| ( exp ) prefixexp_prime !
prefixexp_prime ::= var_member prefixexp_prime 
				  | fc_members prefixexp_prime 
				  | epsilon !
functioncall ::= prefixexp fc_members !
fc_members ::= args 
			 | : Name args !
args ::= ( explist_opt ) | tableconstructor | string !
function ::= function funcbody !
funcbody ::= ( parlist_opt ) block end !
parlist_opt ::= parlist | epsilon !
parlist ::= namelist comma_varargs_opt
		  | ... !
comma_varargs_opt ::= , ... | epsilon !
tableconstructor ::= { fieldlist_opt } !
fieldlist_opt ::= fieldlist | epsilon !
fieldlist ::= field fieldlist_block_rep fieldsep_opt !
fieldlist_block_rep ::= fieldsep field fieldlist_block_rep | epsilon !
field ::= [ exp ] = exp 
		| Name = exp 
		| exp !
fieldsep ::= , | ; !
fieldsep_opt ::= fieldsep | epsilon !
binop ::= + | - | * | / | ^ | % | ..  
		| < | <= | > | >= | == | ~= | and | or !
unop ::= - | not | # !